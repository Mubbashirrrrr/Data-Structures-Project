

										PriorityNode.h

#pragma once
#include<iostream>
class Node
{
private:
	int data;
	int key;  
	Node* next;
public:
	Node();
	Node(int,int);
	void setData(int);
	void setKey(int);
	void setNext(Node*);
	int getData();
	int getKey();
	Node* getNext();
	


};

									PriorityQueue


#pragma once
#include<iostream>
#include "Node.h"
class PriorityQueue
{
private:
	Node* front;
	Node* rear;

public:
	PriorityQueue();
	
	void enQueue(int, int);
	void deQueue();
	bool isEmpty();
	void print();
	void sort();
	void swap(Node*, Node*);
};



									Implementation

#include<iostream>
#include"Node.h"
#include"PriorityQueue.h"
using namespace std;
Node::Node()
{
	data = 0;
	key = 0;
	next = NULL;
}
Node::Node(int data, int key)
{
	this->data = data;
	this->key = key;
	this->next = NULL;

}
void Node::setData(int data)
{
	this->data = data;
}
void Node::setKey(int key)
{
	this->key = key;
}
void Node::setNext(Node* next)
{
	this->next = next;
}
int Node::getData()
{
	return data;
}
int Node::getKey()
{
	return key;
}
Node* Node::getNext()
{
	return next;
}
PriorityQueue::PriorityQueue()
{
	front = NULL;
	rear = NULL;
}
bool PriorityQueue::isEmpty()
{
	if (front == NULL && rear == NULL)
	{
		return true;
	}
	else
	{
		return false;
	}
}

void PriorityQueue::deQueue()
{
	if (isEmpty())
	{
		return;
	}
	else
	{
		Node* temp = front;
		front = front->getNext();
		delete temp;
	}
}
void PriorityQueue::enQueue(int data, int key)
{
	if (isEmpty())
	{
		Node* new_Node = new Node(data, key);
		front = new_Node;
		rear = new_Node;
	}
	else
	{
		Node* new_Node = new Node(data, key);
		rear->setNext(new_Node);
		rear = new_Node;
		sort();
	}
}
void PriorityQueue::print()
{
	Node* temp = front;
	cout << "\tData\t\tPriority" << endl;
	while (temp != NULL)
	{
		cout << "\t" << temp->getData() << "\t\t" << temp->getKey() << endl;
		temp = temp->getNext();
	}
}
void PriorityQueue::swap(Node* current, Node* next)
{
	int tempData = current->getData();
	int tempKey = current->getKey();
	current->setData(next->getData());
	current->setKey(next->getKey());
	next->setData(tempData);
	next->setKey(tempKey);

}
void PriorityQueue::sort()
{

	for (Node* temp = front; temp->getNext() != NULL; temp = temp->getNext())
	{
		for (Node* temp2 = temp->getNext(); temp2 != NULL; temp2 = temp2->getNext())
		{
			if (temp2->getKey() < temp->getKey())
			{
				swap(temp, temp2);
			}
		}


	}
}



										Main


#include <iostream>
#include "PriorityQueue.h"
using namespace std;

int main()
{
    PriorityQueue PQ;

    cout << "Adding elements to the Priority Queue...\n";
    PQ.enQueue(5, 2);
    cout << "Enqueued (5, Priority: 2)\n";
    PQ.enQueue(8, 1);
    cout << "Enqueued (8, Priority: 1)\n";
    PQ.enQueue(16, 3);
    cout << "Enqueued (16, Priority: 3)\n";
    PQ.enQueue(15, 2);
    cout << "Enqueued (15, Priority: 2)\n";
    PQ.enQueue(18, 4);
    cout << "Enqueued (18, Priority: 4)\n";

    cout << "\nDisplaying the current Priority Queue:\n";
    PQ.print();

    cout << "\nDequeuing two elements from the queue...\n";
    PQ.deQueue();
    PQ.deQueue();

    cout << "\nDisplaying the Priority Queue after dequeuing:\n";
    PQ.print();

    cout << "\nSorting the queue...\n";
    PQ.sort();
    cout << "Queue sorted based on priority.\n";

    cout << "\nDisplaying the Priority Queue after sorting:\n";
    PQ.print();

    cout << "\nAdding more elements to the Priority Queue...\n";
    PQ.enQueue(28, 7);
    cout << "Enqueued (28, Priority: 7)\n";

    cout << "\nDisplaying the Priority Queue:\n";
    PQ.print();

    PQ.enQueue(28, 5);
    cout << "Enqueued (28, Priority: 5)\n";

    cout << "\nDisplaying the Priority Queue:\n";
    PQ.print();

    PQ.enQueue(28, -1);
    cout << "Enqueued (28, Priority: -1)\n";

    cout << "\nDisplaying the final Priority Queue:\n";
    PQ.print();

    return 0;
}
